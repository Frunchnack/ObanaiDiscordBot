const Command = require("../../base/Command");

class Grimoire extends Command {
    constructor() {
        super({
            adminOnly: false,
            aliases: ["grimoire-set", "grim-set"],
            args: [],
            category: "Stats",
            cooldown: 5,
            description: "Commande permettant d'√©quiper un grimoire.",
            examples: ["grimoire-set"],
            finishRequest: "ADVENTURE",
            name: "grimoire-set",
            ownerOnly: false,
            permissions: 0,
            syntax: "grimoire-set",
        });
    }

    async run() {
        const pExists = await this.client.playerDb.started(this.message.author.id);
        if (!pExists) return await this.ctx.reply("Vous n'√™tes pas autoris√©.", "Ce profil est introuvable.", null, null, "error");

        const pDatas = await this.client.inventoryDb.get(this.message.author.id);

        if (pDatas.active_grimoire !== null) return await this.ctx.reply("Je ne peux pas √©quiper votre grimoire.", "Il semblerait qu'il y ait d√©j√† un grimoire actif sur votre inventaire. Commencez par le retirer !", null, null, "info");

        const emojis = {
            "adventurer": "üó∫Ô∏è",
            "economist": "üí∞",
            "eternal": "ü™ê",
            "falconer": "ü¶Ö",
            "fortunate": "üçÄ",
            "warrior": "üî•",
        };

        const grimoires = Object.entries(pDatas.grimoires).filter(g => g[1] > 0).filter(g => g[0] !== "mastery").map(e => [require(`../../elements/grimoires/${e[0]}.json`), emojis[e[0]], e[1]]);
        const str = `${grimoires.map(g => `${g[1]} **‚Ä¢ ${g[0].name}** (\`x${g[2]}\`)`).join("\n")}`;
        const msg = await this.ctx.reply("Choix du grimoire √† √©quiper.", str, null, null, "info");
        const l = grimoires.map(e => e[1]);
        l.push("‚ùå");
        const choice = await this.ctx.reactionCollection(msg, l);

        if (choice === null) return await this.ctx.reply("√âquiper votre grimoire.", "La commande n'a pas aboutie.", null, null, "timeout");
        if (choice === "‚ùå") return await this.ctx.reply("√âquiper votre grimoire.", "Vous avez refus√© d'√©quiper un grimoire.", null, null, "info");
        const grimDatas = grimoires.filter(g => g[1] === choice)?.at(0)?.at(0);

        const msg2 = await this.ctx.reply("√âquiper votre grimoire.", `Vous √™tes sur le point d'√©quiper **${grimDatas.name}** ! Cette action est irr√©versible, et vous ne pourrez pas √™tre rembours√© int√©gralement. √ätes vous s√ªr ?`, null, null, "info");
        const choice2 = await this.ctx.reactionCollection(msg2, ["‚ùå", "‚úÖ"]);
        if (choice2 === "‚úÖ") {
            await this.client.inventoryDb.equipGrimoire(this.message.author.id, grimDatas.label);
            return await this.ctx.reply("Votre grimoire a bien √©t√© √©quip√© !", `Vous avez donc √©quip√© **${grimDatas.name}**.`, null, null, "success");
        }
        else if (choice2 === "‚ùå") {
            return await this.ctx.reply("Vous n'√©quipez rien.", `Vous avez d√©cid√© de ne pas √©quiper **${grimDatas.name}**.`, null, null, "info");
        }
        else if (choice2 === null) {
            return await this.ctx.reply("√âquiper votre grimoire.", "La commande n'a pas aboutie.", null, null, "timeout");
        }
    }
}

module.exports = new Grimoire();